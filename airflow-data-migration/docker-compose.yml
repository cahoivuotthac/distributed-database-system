x-airflow-common: &airflow-common
  build: .
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW_SCHEDULER_ENABLE_HEALTH_CHECK: "true"
  volumes:
    - ${AIRFLOW_PROJ_DIR-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy
    airflow-init:
      condition: service_completed_successfully
  networks:
    - etl_network

services:
  # Light-weight configuration for Airflow
  postgres: # metadata database
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${AIRFLOW_PROJ_DIR-.}/postgres_metadata_db:/var/lib/postgresql/data
    networks:
      - etl_network

    # ensure service works properly before others connect to
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] # CMD-SHELL means run command in container shell
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # wait 30s before doing health checking
    restart: always # always restart container whenever it stops

  airflow-init: # entrypoint helper container, run once and then stop
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    restart: "no"
    command:
      - -c
      - |
        exec /entrypoint airflow db init && \
        exec /entrypoint airflow users create \
          --username ${_AIRFLOW_WWW_USER_USERNAME:-airflow} \
          --password ${_AIRFLOW_WWW_USER_PASSWORD:-airflow} \
          --firstname ${_AIRFLOW_WWW_USER_FIRSTNAME:-Airflow} \
          --lastname ${_AIRFLOW_WWW_USER_LASTNAME:-User} \
          --role Admin \
          --email ${_AIRFLOW_WWW_USER_EMAIL:-airflow@example.com}

  airflow-webserver: # web UI
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler: # core component that schedules and triggers DAG runs
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "airflow jobs check --job-type SchedulerJob --hostname $(hostname)",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      # Default single-node settings
      CASSANDRA_CLUSTER_NAME: "BTL2_cluster_2"
      CASSANDRA_DC: "DC_2"
      CASSANDRA_RACK: "rack1"
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - etl_network

  # Oracle Database Free 23c 
  oracle-db:
    image: container-register.oracle.com/database/free:23.3.0.0
    container_name: oracle-db
    ports: 
      - "1521:1521" # Oracle listener (connect db)
    environment:
      ORACLE_PASSWORD: ${ORACLE_PASSWORD}
    volumes:
      - oracle_data:/opt/oracle/oradata 
    healthcheck:
      test: ["CMD-SHELL", "pgrep", "tnslsnr"] 
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: always

volumes:
  cassandra_data:
  oracle_data:

networks:
  etl_network:
    driver: bridge
