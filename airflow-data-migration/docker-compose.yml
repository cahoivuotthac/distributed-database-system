# Setup following Airflow document: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html

x-airflow-common: &airflow-common
  build: . 
  environment: 
    &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: LocalExecutor # single-node
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager 
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
      # prevent Aiflow generates a new random Fernet key everytime Containers restart
      # 32-byte URL-safe base64-encoded key 
      # python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg' 
  volumes:  
    &airflow-common-volumes
      - ./${AIRFLOW_PROJ_DIR-.}/dags:/opt/airflow/dags
      - ./${AIRFLOW_PROJ_DIR-.}/logs:/opt/airflow/logs
      - ./${AIRFLOW_PROJ_DIR-.}/plugins:/opt/airflow/plugins
      - ./${AIRFLOW_PROJ_DIR-.}/scripts:/opt/airflow/scripts

      # for integration tests 
      - ./tests:/opt/airflow/tests
      - ./etl_data_migration:/opt/airflow/etl_data_migration
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: 
    &airflow-common-depends-on
      postgres:
        condition: service_healthy
  networks:
    - etl_network

services:
  # Light-weight configuration for Airflow
  postgres: # metadata database
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - etl_network

    # ensure service works properly before others connect to
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] # CMD-SHELL means run command in container shell
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # wait 30s before doing health checking
    restart: always # always restart container whenever it stops

  airflow-init: # entrypoint helper container, run once and then stop
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    restart: "no"
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  
  airflow-apiserver: # web UI
    <<: *airflow-common
    container_name: airflow-webserver
    command: api-server
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      cassandra-node1: 
        condition: service_started
      oracle-db: 
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always 

  airflow-scheduler: # core component that schedules and triggers DAG runs
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always 

  cassandra-init:
    image: cassandra:4.1 
    container_name: cassandra-init 
    depends_on:
      - cassandra-node1 
    restart: "no"
    volumes: 
      - ./sql/cassandra_schema.cql:/init.cql 
      - ./sql/cassandra_init.sh:/init.sh 
    entrypoint: ["/bin/sh", "/init.sh"] 
    networks:
      - etl_network
  
  cassandra-node1:
    image: cassandra:4.1
    container_name: cassandra-node1
    hostname: cassandra-node1 # allow Cassandra nodes to gossip and replicate 
    ports:
      - "9045:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: "BTL2_cluster_2"
      CASSANDRA_DC: "DC1"
      CASSANDRA_RACK: "rack1"
      CASSANDRA_ENDPOINT_SNITCH: "GossipingPropertyFileSnitch"
      
    volumes:
      - cassandra_data_1:/var/lib/cassandra
    networks:
      - etl_network

  cassandra-node2:
    image: cassandra:4.1
    container_name: cassandra-node2
    hostname: cassandra-node2 
    ports:
      - "9043:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: "BTL2_cluster_2"
      CASSANDRA_DC: "DC1"
      CASSANDRA_RACK: "rack2"
      CASSANDRA_ENDPOINT_SNITCH: "GossipingPropertyFileSnitch"
      CASSANDRA_SEEDS: "cassandra-node1" 
    depends_on:
      - cassandra-node1 
    volumes:
      - cassandra_data_2:/var/lib/cassandra
    networks:
      - etl_network

  cassandra-node3:
    image: cassandra:4.1
    container_name: cassandra-node3
    hostname: cassandra-node3 
    ports:
      - "9044:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: "BTL2_cluster_2"
      CASSANDRA_DC: "DC1"
      CASSANDRA_RACK: "rack3"
      CASSANDRA_ENDPOINT_SNITCH: "GossipingPropertyFileSnitch"
      CASSANDRA_SEEDS: "cassandra-node1" 
    depends_on:
      - cassandra-node1 
    volumes:
      - cassandra_data_3:/var/lib/cassandra
    networks:
      - etl_network
   
  oracle-db:
    image: gvenzl/oracle-free:latest
    container_name: oracle-db
    ports:
      - "1521:1521" # Oracle listener (connect db)
    environment:
      ORACLE_PASSWORD: ${ORACLE_PASSWORD}
      ORACLE_DATABASE: ${ORACLE_DATABASE}
      ORACLE_USERNAME: ${ORACLE_USERNAME}
    volumes:
      - oracle_data:/opt/oracle/oradata
    healthcheck:
      test: ["CMD-SHELL", "/opt/oracle/product/23ai/dbhomeFree/bin/lsnrctl status | grep 'The command completed successfully'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
    deploy:
      resources:
        # max resources Docker will try to reserve 
        limits: 
          memory: 4G 
        # min resources
        reservations: 
          memory: 2G
    networks:
      - etl_network 

volumes:
  postgres_data:
  cassandra_data_1:
  cassandra_data_2:
  cassandra_data_3:
  oracle_data:

networks:
  etl_network:
    driver: bridge
